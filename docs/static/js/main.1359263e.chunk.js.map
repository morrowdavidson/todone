{"version":3,"sources":["Header/Header.js","Nav/NavItem.js","Nav/Nav.js","TodoList/TodoItem.js","TodoList/AddItemButton.js","TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","id","className","navItem","onClick","click","activeClass","href","label","nav","displays","map","display","i","activeDisplay","NavItem","key","switchDisplayHandler","bind","todoItem","data","checkedToggle","keyValue","checkedClass","content","removeItem","quickLinks","addItemButton","buttonOrInput","enteringInput","inputToggleHandler","autoFocus","onKeyDown","event","target","value","onBlur","type","buttonLabel","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","replay","state","listId","replace","currentKeyCount","keyCounter","currentState","setState","defineProperty","concat","toConsumableArray","isChecked","newState","filter","listState","editItem","console","log","listItem","moveItem","moveTo","addedItem","todayList","weekList","allList","_this2","allItems","TodoItem","weekItems","todayItems","allButton","AddItemButton","weekButton","todayButton","Component","loadDisplay","window","location","hash","displayHash","App","displayId","Header_Header","Nav_Nav","src_TodoList_TodoList","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1359263e.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nconst header = (props) => {\n    return (\n        <div id=\"header\">\n            <div id=\"logo_tag\">\n                <h1>todone</h1>\n                <p>A simple todo app.</p>\n            </div>\n            <i className=\"gear-icon\"></i>\n        </div>\n    )\n};\n\nexport default header;","import React from 'react';\n\nconst navItem = (props) => {\n    return (\n        <li className=\"nav-item\">\n            <a onClick={props.click} className={'nav-link ' + props.activeClass} id={props.id + 'Nav'} href={'#' + props.id}>{props.label}</a>\n        </li>\n    )\n};\n\nexport default navItem;","import React from 'react';\nimport './Nav.scss';\nimport NavItem from './NavItem';\n\n\nconst nav = (props) => {\n  return (\n    <nav id=\"nav\"> \n      <ul id=\"list-nav\" className=\"nav nav-pills nav-fill\">\n        {props.displays.map((display, i) => {\n          if (display.id === props.activeDisplay){\n            return <NavItem key={i} click={props.switchDisplayHandler.bind(this, display.id)} id={display.id} label={display.label} activeClass=\"active\" />\n          } else {\n            return <NavItem key={i} click={props.switchDisplayHandler.bind(this, display.id)} id={display.id} label={display.label} activeClass=\"\" />\n          }\n        }\n        )}\n      </ul>\n    </nav> \n  )\n};\n\nexport default nav;","import React from 'react';\n\nconst todoItem = (props) => {\n    return(\n        <li className=\"list-group-item\">\n            <i data={props.id} onClick={props.checkedToggle} id={props.keyValue + 'CheckBox'} className={\"far \" + props.checkedClass}></i> \n            <span className=\"to-do-item\">\n                {props.content} \n                {/* <i data={props.id} onClick={props.editItem} id={props.keyValue + 'EditButton'} className=\"far fa-edit\"></i> */}\n                <i data={props.id} onClick={props.removeItem} id={props.keyValue + 'DeleteButton'} className=\"far fa-trash-alt\"></i>\n            </span>\n            {props.quickLinks}\n        </li>\n    )\n}\n\nexport default todoItem;","import React from 'react';\n\nconst addItemButton = (props) => {\n  let buttonOrInput = null;\n  \n  if (props.enteringInput) {\n    buttonOrInput = \n      <li id={props.id + \"Input\"} className=\"list-group-item add-task-input\">\n        <button onClick={props.inputToggleHandler} className=\"fas fa-plus\"></button>\n        <input  autoFocus \n                onKeyDown={(event) => {\n                  if (event.key === 'Enter'){\n                    props.inputToggleHandler(event, \"replay\");\n                    event.target.value = '';\n                }}} \n                onBlur={props.inputToggleHandler} \n                id={props.id + \"InputField\"} \n                type=\"text\" />\n      </li>\n  }\n  else {\n    buttonOrInput = \n    <li id={props.id + \"Button\"} className=\"list-group-item add-task-button\">\n      <button onClick={props.inputToggleHandler} className=\"fas fa-plus\"><span>{props.buttonLabel}</span></button>\n    </li>\n  }\n  return (\n    <div>\n      {buttonOrInput}\n    </div>\n  )\n}\n\nexport default addItemButton;","import React, { Component } from 'react';\nimport './TodoList.scss';\nimport TodoItem from './TodoItem';\nimport AddItemButton from './AddItemButton';\n\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enteringInput: false,\n      buttonLabel: 'Add task',\n      keyCounter: 4,\n      todayList: [\n        {\n          content: 'this is a test for today',\n          key: 1,\n          isChecked: false,\n        }\n      ],\n      weekList: [\n        {\n          content: 'this is a test for this week',\n          key: 2,\n          isChecked: false,\n        }\n      ],\n      allList: [\n        {\n          content: 'this is a test for all',\n          key: 3,\n          isChecked: false,\n        }\n      ],\n    };\n  }\n\n  inputToggleHandler = (event, replay) => {\n    if (!this.state.enteringInput) {\n      this.setState({\n        enteringInput : true\n      })\n    } else if (event.target.value !== '') {\n      let inputId = event.target.id;\n      let listId = inputId.replace('InputField', '');\n      let currentKeyCount = this.state.keyCounter;\n      let currentState = this.state[listId];\n\n      this.setState({\n\n        keyCounter : ++currentKeyCount,\n        enteringInput : false,\n        [listId] : [\n          ...currentState,\n          {\n            content: event.target.value,\n            key: this.state.keyCounter + [listId],\n            isChecked: false,\n          }\n        ]\n      })\n      if (replay){\n        this.setState({\n          enteringInput : true,\n        })\n      }\n    } else {\n    this.setState({\n      enteringInput : false,\n    })\n    }\n  }\n  \n  removeItem = (listId, key) => {\n    let currentState = this.state[listId];\n    let newState = currentState.filter((listState)=>{\n      return listState.key !== key\n    })\n\n    this.setState({\n      [listId] : newState\n    })\n\n  }\n\n  editItem = (listId, key) => {\n    console.log(listId);\n    console.log(key);\n  }\n\n  checkedToggle = (event, key, listId) => {\n    let currentState = this.state[listId];\n\n    if(event.target.className === 'far fa-circle'){\n\n    let newState = currentState.map(listItem => {\n      if (listItem.key === key){\n        listItem.isChecked = true; \n        return listItem;     \n      }     \n      return listItem;\n    })   \n    this.setState({\n      [listId] : newState\n    })\n    \n    } else {\n      let newState = currentState.map(listItem => {\n        if (listItem.key === key){\n          listItem.isChecked = false; \n          return listItem;     \n        }     \n      return listItem;\n      })    \n      this.setState({\n        [listId] : newState\n      })\n    }\n  }\n\n  moveItem = (key, listId, moveTo) => {\n    let currentState = this.state[listId];\n    let addedItem = currentState.filter((listState)=>{\n      return listState.key === key\n    })\n    let newState = currentState.filter((listState)=>{\n      return listState.key !== key\n    })\n\n    this.setState({\n      [listId] : newState\n    })\n    if (moveTo==='todayList'){\n      this.setState({\n        todayList :[\n          ...addedItem,\n          ...this.state.todayList\n        ]\n      })\n    }else if (moveTo==='weekList') {\n      this.setState({\n        weekList :[\n          ...addedItem,\n          ...this.state.weekList\n        ]\n      })\n    }\n    else {\n      this.setState({\n        allList :[\n          ...addedItem,\n          ...this.state.allList\n        ]\n      })\n    }\n  }\n\n  render(){\n    let allItems = this.state.allList.map((listItem) => {\n      return <TodoItem \n              checkedToggle={(event) => {this.checkedToggle(event, listItem.key, \"allList\")}} \n              checkedClass={listItem.isChecked ? 'fa-check-circle' : 'fa-circle'} \n              id=\"allList\" \n              key={listItem.key} \n              content={listItem.content} \n              removeItem={() => this.removeItem(\"allList\", listItem.key)}\n              quickLinks={<div className=\"quicklinks\"><a onClick={() => {this.moveItem(listItem.key, \"allList\",\"weekList\")}} id={listItem.key + 'MoveWeek'} href='#week'>Move to this week</a></div>}\n              />\n    }) \n    let weekItems = this.state.weekList.map((listItem) => {\n      return <TodoItem \n              checkedToggle={(event) => {this.checkedToggle(event, listItem.key, \"weekList\")}} \n              checkedClass={listItem.isChecked ? 'fa-check-circle' : 'fa-circle'} \n              id=\"weekList\" \n              key={listItem.key} \n              content={listItem.content} \n              removeItem={() => this.removeItem(\"weekList\", listItem.key)}\n              quickLinks={<div className=\"quicklinks\"><a onClick={() => {this.moveItem(listItem.key, \"weekList\",\"todayList\")}} id={listItem.key + 'MoveToday'} href='#today'>Move to today</a> | <a onClick={() => {this.moveItem(listItem.key, \"weekList\",\"allList\")}} id={listItem.key + 'MoveAll'} href='#all'>Move to all tasks</a></div>}\n              />\n    }) \n    let todayItems = this.state.todayList.map((listItem) => {\n      return <TodoItem \n              checkedToggle={(event) => {this.checkedToggle(event, listItem.key, \"todayList\")}} \n              checkedClass={listItem.isChecked ? 'fa-check-circle' : 'fa-circle'} \n              id=\"todayList\" \n              key={listItem.key} \n              content={listItem.content} \n              removeItem={() => this.removeItem(\"todayList\", listItem.key)}\n              quickLinks={<div className=\"quicklinks\"><a onClick={() => {this.moveItem(listItem.key, \"todayList\", \"weekList\")}} id={listItem.key + 'MoveWeek'} href='#week'>Move to this week</a></div>}\n\n              />\n    }) \n    \n    let allButton = \n      <AddItemButton \n      id = 'allList' \n      inputToggleHandler = {this.inputToggleHandler} \n      enteringInput = {this.state.enteringInput}\n      buttonLabel = 'Add a task'/>\n      \n    let weekButton = \n      <AddItemButton \n      id = 'weekList' \n      inputToggleHandler = {this.inputToggleHandler} \n      enteringInput = {this.state.enteringInput}\n      buttonLabel = 'Add a task for this week'/>\n\n    let todayButton = \n      <AddItemButton \n      id = 'todayList' \n      inputToggleHandler = {this.inputToggleHandler} \n      enteringInput = {this.state.enteringInput}\n      buttonLabel = 'Add a task for today'/>\n\n    let allList =  \n      <div>\n        <ul className=\"list-group\" id='allList'>\n          {allItems}\n          {allButton}\n        </ul>\n        <ul className=\"list-group\" id='weekList'>\n          {weekItems}\n        </ul>\n        <ul className=\"list-group\" id='todayList'>\n          {todayItems}\n        </ul>\n      </div>\n\n    let weekList =\n      <div>\n        <ul className=\"list-group\" id='weekList'>\n          {weekItems}\n          {weekButton}\n        </ul>\n        <ul className=\"list-group\" id='todayList'>\n          {todayItems}\n        </ul>\n      </div>\n      \n    let todayList =\n      <div>\n        <ul className=\"list-group\" id='todayList'>\n          {todayItems}\n          {todayButton}\n        </ul>\n      </div>\n\n    let currentLists = allList;\n\n\n    if (this.props.activeDisplay === 'today'){\n      currentLists = todayList;\n    } else if (this.props.activeDisplay === 'week'){\n      currentLists = weekList;\n    } else {\n      currentLists = allList;\n    }\n\n\n    return (\n      currentLists\n    )\n  }\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport './App.scss';\nimport Header from './Header/Header'\nimport Nav from './Nav/Nav';\nimport TodoList from './TodoList/TodoList';\n\n \nlet loadDisplay = 'today';\n\n(() => {\n  if (window.location.hash) {\n    let displayHash = window.location.hash;\n    loadDisplay = displayHash.replace('#','');\n}}\n)();\n\nclass App extends Component {\n  state = {\n    displays: [\n      { label: 'Today', id: 'today' },\n      { label: 'This Week', id: 'week' },\n      { label: 'All Tasks', id: 'all' }\n    ],\n    activeDisplay: loadDisplay, \n  }\n  \n  switchDisplayHandler = (displayId) => {  \n    this.setState({\n      activeDisplay : displayId\n    })\n  }\n  render() {\n    \n    return ( \n\n      <div id=\"page\">\n        <div id=\"app-container\">\n          <Header />\n          <Nav \n            displays = {this.state.displays}\n            switchDisplayHandler = {this.switchDisplayHandler}\n            activeDisplay = {this.state.activeDisplay}\n          />\n          <TodoList \n            activeDisplay = {this.state.activeDisplay}\n          />\n        </div>\n      </div>\n    );\n    \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}